<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <Itf Name="I_Assert" Id="{b4f88ed5-c1d6-0e0a-0598-db946561ba17}">
    <Declaration><![CDATA[INTERFACE I_Assert
]]></Declaration>
    <Method Name="M_Assert" Id="{ffff88d6-0cfd-04bb-2497-39648fb2c924}">
      <Declaration><![CDATA[METHOD PUBLIC M_Assert
VAR_INPUT
END_VAR
]]></Declaration>
    </Method>
    <Method Name="M_Equals" Id="{f5484c1a-2f74-09b3-2fea-dcee23f7da1f}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals : I_Assert
VAR_INPUT
	Expected:			ANY;			// Expected as udint
    Actual:				ANY;          // Actual as udint
	Message:			STRING(255);   	// Message as string
END_VAR                                 ]]></Declaration>
    </Method>
    <Method Name="M_Equals_Array_LREAL" Id="{774d23e5-1a54-0df4-0ca6-9307963084b9}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_Array_LREAL : I_Assert
VAR_IN_OUT
	Expected:			ARRAY [*] OF LREAL;	// Expected as array of lreal
	Actual:				ARRAY [*] OF LREAL;	// Actual as array of lreal
END_VAR                                    
VAR_INPUT                                  
	Tolerance:			LREAL;              // Tolerance as lreal
	Message:			STRING(255);		// Message as string
END_VAR]]></Declaration>
    </Method>
    <Method Name="M_Equals_Array_REAL" Id="{a9b073a6-63b4-0f7f-23a2-28f68111f7aa}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_Array_REAL : I_Assert
VAR_IN_OUT
	Expected:			ARRAY [*] OF REAL;	// Expected as array of real
	Actual:				ARRAY [*] OF REAL;	// Actual as array of real
END_VAR                                   
VAR_INPUT                                 
	Tolerance:			REAL;             	// Tolerance as real
	Message:			STRING(255);      	// Message as string
END_VAR]]></Declaration>
    </Method>
    <Method Name="M_Equals_BOOL" Id="{45693d85-d364-042e-341f-db4b3dc339e2}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_BOOL : I_Assert
VAR_INPUT
	Expected:			BOOL;				// Expected as bool
    Actual:				BOOL;           	// Actual as bool
	Message:			STRING(255);    	// Message as string
END_VAR                                                                       	]]></Declaration>
    </Method>
    <Method Name="M_Equals_BYTE" Id="{3780a050-48c6-03a3-36df-dd8a2cb5b373}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_BYTE : I_Assert
VAR_INPUT
	Expected:			BYTE;			// Expected as byte
    Actual:				BYTE;           // Actual as byte
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
    </Method>
    <Method Name="M_Equals_DINT" Id="{fe4ac3e1-068a-0b6b-3e20-a01bb4c2038b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_DINT : I_Assert
VAR_INPUT
	Expected:			DINT;			// Expected as dint
    Actual:				DINT;           // Actual as dint
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
    </Method>
    <Method Name="M_Equals_INT" Id="{eda99ceb-4d13-04cc-1865-e05193c0c82b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_INT : I_Assert
VAR_INPUT
	Expected:			INT;			// Expected as int
    Actual:				INT;            // Actual as int
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
    </Method>
    <Method Name="M_Equals_LINT" Id="{fda089c2-447e-0b05-280f-2c291d6a88ba}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_LINT : I_Assert
VAR_INPUT
	Expected:			LINT;			// Expected as lint
    Actual:				LINT;           // Actual as lint
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
    </Method>
    <Method Name="M_Equals_LREAL" Id="{40c6587a-8f63-0780-09c7-8afdaca5a613}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_LREAL : I_Assert
VAR_INPUT
	Expected:			LREAL;				// Expected as lreal
    Actual:				LREAL;              // Actual as lreal
	Tolerance:			LREAL;             	// Tolerance as lreal         
	Message:			STRING(255);		// Message as string
END_VAR]]></Declaration>
    </Method>
    <Method Name="M_Equals_REAL" Id="{0e1491d4-1734-083b-3aa8-c32a38083f95}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_REAL : I_Assert
VAR_INPUT
	Expected:			REAL;			// Expected as real
    Actual:				REAL;           // Actual as real
	Tolerance:			REAL;           // Tolerance as real    
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
    </Method>
    <Method Name="M_Equals_STRING" Id="{69a0d009-c862-0a94-0105-576a01034679}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_STRING : I_Assert
VAR_INPUT
	Expected:			STRING(255);		// Expected as string
    Actual:				STRING(255);        // Actual as string
	Message:			STRING(255);      	// Message as string  
END_VAR                                  ]]></Declaration>
    </Method>
    <Method Name="M_Equals_TIME" Id="{cc38e39e-83b0-0834-2cd1-f45e0dc3eb24}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_TIME : I_Assert
VAR_INPUT
	Expected:			TIME;				// Expected as time
    Actual:				TIME;               // Actual as time
	Tolerance:			TIME;               // Tolerance as time    
	Message:			STRING(255);        // Message as string
END_VAR]]></Declaration>
    </Method>
    <Method Name="M_Equals_UDINT" Id="{804b3179-3ca4-0fb7-3ddf-9bb74b342681}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_UDINT : I_Assert
VAR_INPUT
	Expected:			UDINT;			// Expected as udint
    Actual:				UDINT;          // Actual as udint
	Message:			STRING(255);   	// Message as string
END_VAR                                 ]]></Declaration>
    </Method>
    <Method Name="M_Equals_UINT" Id="{b050c1ec-67cb-0384-3394-17ab2643343f}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_UINT : I_Assert
VAR_INPUT
	Expected:			UINT;			// Expected as uint
    Actual:				UINT;           // Actual as uint
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
    </Method>
    <Method Name="M_Equals_ULINT" Id="{512e5a0c-9062-06ac-2524-bd84cdbb1966}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_ULINT : I_Assert
VAR_INPUT
	Expected:			ULINT;			// Expected as ulint
    Actual:				ULINT;          // Actual as ulint
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
    </Method>
    <Method Name="M_Equals_UXINT" Id="{42a32ff5-e95e-0acb-201f-22f3e06fd5e8}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_UXINT : I_Assert
VAR_INPUT
	Expected:			UXINT;			// Expected as udint
    Actual:				UXINT;          // Actual as udint
	Message:			STRING(255);   	// Message as string
END_VAR                                 ]]></Declaration>
    </Method>
    <Method Name="M_Equals_WSTRING" Id="{b67576ba-db17-0aaf-103d-b9281476ad75}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_WSTRING : I_Assert
VAR_INPUT
	Expected:			WSTRING(255);		// Expected as wstring
    Actual:				WSTRING(255);       // Actual as wstring
	Message:			STRING(255);        // Message as string
END_VAR]]></Declaration>
    </Method>
    <Method Name="M_Equals_XINT" Id="{fe71f855-65ff-0e74-293c-f678aa85d8de}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_XINT : I_Assert
VAR_INPUT
	Expected:			XINT;			// Expected as udint
    Actual:				XINT;          // Actual as udint
	Message:			STRING(255);   	// Message as string
END_VAR                                 ]]></Declaration>
    </Method>
    <Method Name="M_Equals_XWORD" Id="{e49721e1-d752-04f4-283c-d678d339f1ff}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_XWORD : I_Assert
VAR_INPUT
	Expected:			XWORD;			// Expected as udint
    Actual:				XWORD;          // Actual as udint
	Message:			STRING(255);   	// Message as string
END_VAR                                 ]]></Declaration>
    </Method>
    <Method Name="M_Error" Id="{f0e7a2f9-c312-0edc-2379-fc7ed26dd080}">
      <Declaration><![CDATA[METHOD PUBLIC M_Error
VAR_INPUT
	Data:				STRING(255);
	Message:			STRING(255);
END_VAR
]]></Declaration>
    </Method>
    <Method Name="M_Failure" Id="{5c8874c8-05e1-0138-33cf-96b3e5819e33}">
      <Declaration><![CDATA[METHOD PUBLIC M_Failure
VAR_INPUT
	Data:				STRING(255);
	Message:			STRING(255);
END_VAR]]></Declaration>
    </Method>
    <Method Name="M_IsTRUE" Id="{64b3dfa0-987d-02e1-2a0b-4a9910ccacd1}">
      <Declaration><![CDATA[METHOD PUBLIC M_IsTRUE : I_Assert
VAR_INPUT
    Actual:				BOOL;				// Actual as bool
	Message:			STRING(255);        // Message as string
END_VAR                                     
                                            
                                            ]]></Declaration>
    </Method>
    <Method Name="M_Passed" Id="{3cc4e56e-196c-0c54-111d-ad42ac42925b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Passed
VAR_INPUT
END_VAR
]]></Declaration>
    </Method>
    <Method Name="M_Reset" Id="{0495facf-8e26-030d-2f21-8a670848ee29}">
      <Declaration><![CDATA[METHOD PUBLIC M_Reset : I_Assert
VAR_INPUT
END_VAR
]]></Declaration>
    </Method>
    <Method Name="M_Skip" Id="{853798c9-a88b-0930-1b0d-61cc51b72034}">
      <Declaration><![CDATA[METHOD PUBLIC M_Skip
VAR_INPUT
	Message:			STRING(255);	// Message as string
END_VAR
]]></Declaration>
    </Method>
  </Itf>
</TcPlcObject>