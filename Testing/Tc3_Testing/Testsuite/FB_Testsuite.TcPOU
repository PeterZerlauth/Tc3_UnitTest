<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Testsuite" Id="{139d3d86-4160-0b84-0f97-b2398a2924e9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Testsuite EXTENDS FB_Base IMPLEMENTS I_Testsuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	stOptions:			ST_TestsuiteOptions;
	stTestsuite:		ST_Testsuite;
	stTestcase:			ST_Testcase;
	nActual:			INT:=  E_Testcase.Init;
	nNext:				INT;
	fCycleTime: 		LREAL;	
	iParent:			I_Testsuites;
	fbTimeout:			TON:= (PT:= T#300S);
	fbRuntime:			TON:= (PT:= T#300S);
	fbBuilder:			FB_StringBuilder;
	fbList:				FB_ListSTRING;
	fbAssert:			FB_Assert;
	iLogger:			I_Logger;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[SUPER^();]]></ST>
    </Implementation>
    <Method Name="M_Execute" Id="{78e3f5cf-1c2d-00e7-2cad-335430cad839}">
      <Declaration><![CDATA[METHOD PROTECTED M_Execute : BOOL
VAR_INPUT
END_VAR
VAR
	nIndex: DINT:=0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF fbTimeout.PT <> T#0S THEN
	fbTimeout(IN:= TRUE);
END_IF
stTestcase.nAssertions:= fbAssert.nAssert;
IF nActual <> nNext THEN
	IF fbAssert.nSkipped <> 0 THEN
			fbBuilder.M_Reset();
			fbBuilder.M_Append('$T$T<testcase name="');
			fbBuilder.M_Append(stTestCase.sName);
			fbBuilder.M_Append('" classname="');
			fbBuilder.M_Append(stTestCase.sClassname);
			fbBuilder.M_Append('" assertions="');
			fbBuilder.M_AppendINT(stTestCase.nAssertions);
			fbBuilder.M_Append('" time="');
			fbBuilder.M_AppendREAL(stTestCase.fTime, 4);
			fbBuilder.M_Append('" file="');
			fbBuilder.M_Append(stTestCase.sFile);
			fbBuilder.M_Append('" line="');
			fbBuilder.M_Append(stTestCase.sLine);
			fbBuilder.M_Append('" >');
			fbList.M_Add(fbBuilder.M_ToString());
			WHILE nIndex < fbAssert.fbList.P_Length DO
				fbList.M_Add(fbAssert.fbList.M_Item(nIndex));
				IF iLogger <> 0 THEN
					iLogger.M_Warning(stTestcase.sName);					
				END_IF
				nIndex:= nIndex + 1;
			END_WHILE
			fbList.M_Add('$T$T</testcase>');
			stTestsuite.nTests:= stTestsuite.nTests + 1;
			stTestsuite.nFailures:= stTestsuite.nFailures + fbAssert.nFailures;
			stTestsuite.nErrors:= stTestsuite.nErrors + fbAssert.nErrors;
			stTestsuite.nSkipped:= stTestsuite.nSkipped + fbAssert.nSkipped;
			stTestsuite.nAssertions:= stTestsuite.nAssertions + fbAssert.nAssert;
			stTestcase.fTime:= 0.0;
			fbTimeout(IN:= FALSE);
			nActual:= nNext;
	ELSIF fbAssert.nPassed = fbAssert.nAssert THEN
		fbBuilder.M_Reset();
		fbBuilder.M_Append('$T$T<testcase name="');
		fbBuilder.M_Append(stTestcase.sName);
		fbBuilder.M_Append('" classname="');
		fbBuilder.M_Append(stTestcase.sClassname);
		fbBuilder.M_Append('" assertions="');
		fbBuilder.M_AppendINT(stTestcase.nAssertions);
		fbBuilder.M_Append('" time="');
		fbBuilder.M_AppendREAL(stTestcase.fTime, 4);
		fbBuilder.M_Append('" file="');
		fbBuilder.M_Append(stTestcase.sFile);
		fbBuilder.M_Append('" line="');
		fbBuilder.M_Append(stTestcase.sLine);
		fbBuilder.M_Append('" />');
		fbList.M_Add(fbBuilder.M_ToString());
	
		stTestsuite.nTests:= stTestsuite.nTests + 1;
		stTestsuite.nFailures:= stTestsuite.nFailures + fbAssert.nFailures;
		stTestsuite.nErrors:= stTestsuite.nErrors + fbAssert.nErrors;
		stTestsuite.nSkipped:= stTestsuite.nSkipped + fbAssert.nSkipped;
		stTestsuite.nAssertions:= stTestsuite.nAssertions + fbAssert.nAssert;
		fbTimeout(IN:= FALSE);
		stTestcase.fTime:= 0.0;
		nActual:= nNext;
	ELSE
		IF fbTimeout.Q THEN
			fbBuilder.M_Reset();
			fbBuilder.M_Append('$T$T<testcase name="');
			fbBuilder.M_Append(stTestCase.sName);
			fbBuilder.M_Append('" classname="');
			fbBuilder.M_Append(stTestCase.sClassname);
			fbBuilder.M_Append('" assertions="');
			fbBuilder.M_AppendINT(stTestCase.nAssertions);
			fbBuilder.M_Append('" time="');
			fbBuilder.M_AppendREAL(stTestCase.fTime, 4);
			fbBuilder.M_Append('" file="');
			fbBuilder.M_Append(stTestCase.sFile);
			fbBuilder.M_Append('" line="');
			fbBuilder.M_Append(stTestCase.sLine);
			fbBuilder.M_Append('" >');
			fbList.M_Add(fbBuilder.M_ToString());
			WHILE nIndex < fbAssert.fbList.P_Length DO
				fbList.M_Add(fbAssert.fbList.M_Item(nIndex));
				IF iLogger <> 0 THEN
					iLogger.M_Error(stTestcase.sName);	
				END_IF
				nIndex:= nIndex + 1;
			END_WHILE
      
			fbList.M_Add('$T$T</testcase>');
			stTestsuite.nTests:= stTestsuite.nTests + 1;
			stTestsuite.nFailures:= stTestsuite.nFailures + fbAssert.nFailures;
			stTestsuite.nErrors:= stTestsuite.nErrors + fbAssert.nErrors;
			stTestsuite.nSkipped:= stTestsuite.nSkipped + fbAssert.nSkipped;
			stTestsuite.nAssertions:= stTestsuite.nAssertions + fbAssert.nAssert;
			stTestcase.fTime:= 0.0;
			fbTimeout(IN:= FALSE);
			IF stOptions.bAbortOnError THEN
				// won't have an effect if the last test. Final line of code would cause normal exit
				iLogger.M_Error('Tests halted on failed assert');
				nActual := E_Testcase.Done;
			ELSE
				nActual := nNext;
			END_IF
		END_IF
	END_IF
END_IF
fbRuntime(IN:= TRUE);
stTestsuite.fTime:=  TIME_TO_LREAL(fbRuntime.ET) / 1000.0;
fbAssert.M_Reset();
M_Execute:= nActual = E_Testcase.Done;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Starting" Id="{fa2aca87-7276-0f36-03ec-8cf918759ac1}">
      <Declaration><![CDATA[METHOD PROTECTED M_Starting : BOOL
VAR_INPUT
END_VAR

VAR
	nIndex: DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nState OF
	0:
		IF 	SUPER^.M_Starting() THEN
			fbList.M_Clear();
			fCycleTime:= F_GetCycleTime();	
			stTestsuite.sName:= F_GetName(sInstancePath);
			stTestsuite.nTests:= 0;
			stTestsuite.nFailures:= 0;		
			stTestsuite.nErrors:= 0;	
			stTestsuite.nSkipped:= 0;		
			stTestsuite.nAssertions:= 0;	
			stTestsuite.fTime:= 0.0;
			stTestsuite.sFile:= '';
			stTestsuite.sTimestamp:= SYSTEMTIME_TO_ISO8601(fbGetTime.TIMESTR, 0, FALSE, 3);
			stTestsuite.sTimestamp:= LEFT(stTestsuite.sTimestamp, LEN(stTestsuite.sTimestamp) - 6);
			nState:= 1;
		END_IF
		
	1:
		nActual:= E_Testcase.Start;
		fbRuntime.IN:= True;
		M_Starting:= TRUE;
	
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Stopping" Id="{86997241-28ad-050a-3199-6300c2ef6b3b}">
      <Declaration><![CDATA[METHOD PROTECTED M_Stopping : BOOL
VAR_INPUT
END_VAR
VAR
	sValue: 			STRING(255);
	nIndex: 			DINT:=0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//    <testsuite name="Tests.Registration" tests="8" failures="1" errors="1" skipped="1" assertions="20" time="16.082687" timestamp="2021-04-02T15:48:23" file="tests/registration.code">
fbBuilder.M_Reset();
fbBuilder.M_Append('$T<testsuite name="');
fbBuilder.M_Append(stTestsuite.sName);
fbBuilder.M_Append('" tests="');
fbBuilder.M_AppendINT(stTestsuite.nTests);
fbBuilder.M_Append('" failures="');
fbBuilder.M_AppendINT(stTestsuite.nFailures);
fbBuilder.M_Append('" errors="');
fbBuilder.M_AppendINT(stTestsuite.nErrors);
fbBuilder.M_Append('" skipped="');
fbBuilder.M_AppendINT(stTestsuite.nSkipped);
fbBuilder.M_Append('" assertions="');
fbBuilder.M_AppendINT(stTestsuite.nAssertions);	
fbBuilder.M_Append('" time="');
fbBuilder.M_AppendREAL(stTestsuite.fTime, 3);
fbBuilder.M_Append('" timestamp="');
fbBuilder.M_Append(stTestsuite.sTimestamp);
fbBuilder.M_Append('" file="');
fbBuilder.M_Append(stTestsuite.sFile);
fbBuilder.M_Append('">');
fbBuilder.M_ToAny(sValue);
fbList.M_Insert(0, sValue);
fbList.M_Add('$T</testsuite>');
IF iParent <> 0 THEN
	iParent.P_Data.nTests:= iParent.P_Data.nTests + stTestsuite.nTests;
	iParent.P_Data.nFailures:= iParent.P_Data.nFailures + stTestsuite.nFailures;
	iParent.P_Data.nErrors:= iParent.P_Data.nErrors + stTestsuite.nErrors;
	iParent.P_Data.nSkipped:= iParent.P_Data.nSkipped + stTestsuite.nSkipped;
	iParent.P_Data.nAssertions:= iParent.P_Data.nAssertions + stTestsuite.nAssertions;
	WHILE nIndex < fbList.P_Length DO
		iParent.P_List.M_Add(fbList.M_Item(nIndex));
		nIndex:= nIndex + 1;
	END_WHILE
END_IF
fbTimeout(IN:=FALSE);
fbRuntime(IN:=FALSE);
M_Stopping:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Testcase" Id="{6d08bc5e-dc98-0f10-1d34-7f069e37b9d3}">
      <Declaration><![CDATA[METHOD PUBLIC M_Testcase : BOOL
VAR_INPUT
	Classname:			STRING(255);	// Classname as string
	Timeout:			TIME;			// Timeout as time
	File:				STRING(255);	// File as string
	Line:				STRING(255);	// Line as string
	Next:				INT;			// Next Testcase as int
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stTestcase.sName:= CONCAT(CONCAT(CONCAT(stTestsuite.sName,'.'), 'M_Testcase_'), INT_TO_STRING(nActual));
stTestcase.sClassname:= Classname;
stTestcase.nAssertions:= fbAssert.fbList.P_Length;
stTestcase.sFile:= File;
stTestcase.sLine:= Line;
stTestcase.fTime:= stTestcase.fTime + fCycleTime;
fbTimeout.PT:= Timeout;
nNext:= Next;]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Assert" Id="{e23dc60a-455c-05e0-203b-c87d7f0bf2be}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Assert : I_Assert]]></Declaration>
      <Get Name="Get" Id="{af1ab888-05f6-09a5-0125-87c54b409f9b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Assert:= fbAssert;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_File" Id="{0fe076bc-db3e-085c-3ace-6f6832b15ee0}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_File : String(255)]]></Declaration>
      <Get Name="Get" Id="{f528350a-044e-0a22-052d-522911e176be}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_File:= stTestsuite.sFile;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{d317fdb6-8e19-0995-18ee-6995dd4394d2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stTestsuite.sFile:= P_File;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_List" Id="{37feeb7c-033b-03ab-2f25-c1e23d6d59c4}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_List : I_ListSTRING]]></Declaration>
      <Get Name="Get" Id="{00de385f-f60f-01e8-2c65-d740b8aed217}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_List:= fbList;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Logger" Id="{389579cb-377c-0600-1342-01af8803477a}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Logger : I_Logger]]></Declaration>
      <Get Name="Get" Id="{296567e7-21a5-0164-1f56-62cb7073a610}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Logger:= iLogger;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{5fd7c513-137f-09bd-08a8-49968e32f92a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iLogger:= P_Logger;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_Options" Id="{2e5bc501-e4a1-0ec3-32fb-ab288b3ddc76}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Options : reference to ST_TestsuiteOptions]]></Declaration>
      <Get Name="Get" Id="{129b8483-9d51-087d-18e0-daa5f4ada1f3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Options ref= stOptions;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="P_Parent" Id="{26b3c1be-b48f-0a73-3f11-669666d67824}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Parent : I_Testsuites]]></Declaration>
      <Get Name="Get" Id="{cbeb0dff-5be2-0eeb-3c4b-d2308bd2f226}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Parent:= iParent;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b6a9fa31-34bd-0c5b-2292-21f39b156b39}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iParent:= P_Parent;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="P_Testcase" Id="{3b7b6a2e-6d4a-0f0e-2a1d-3d960844879b}">
      <Declaration><![CDATA[PROPERTY PUBLIC P_Testcase : int]]></Declaration>
      <Get Name="Get" Id="{854def52-87cb-03f8-22d6-ee5144597bf5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Testcase:= nActual;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_Testsuite">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.M_Execute">
      <LineId Id="117" Count="108" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.M_Starting">
      <LineId Id="3" Count="22" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.M_Stopping">
      <LineId Id="3" Count="36" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.M_Testcase">
      <LineId Id="3" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Assert.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_File.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_File.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_List.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Logger.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Logger.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Options.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Parent.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Parent.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Testsuite.P_Testcase.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>