<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="MAIN" Id="{433aef42-481d-09d7-2a0d-9f4eb2c45d04}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	bExecute:				BOOL;
	fbTestsuites:			FB_Testsuites;				// Testsuites
	fbTestsuite1:			FB_Testsuite;				// Testsuite	FB_StringBuilder
	fbTestsuite2:			FB_Testsuite;				// Testsuite	FB_ListSTRING
	fbTestsuite3:			FB_Testsuite;				// Testsuite	FB_File
	fbTestsuite4:			FB_Testsuite;				// Testsuite	Arrays
                    		
	nIndex: 				INT;						// Test-vars
	sValue:					STRING(255);				// Test-vars
	sValue2:				STRING(255);				// Test-vars
	sValue3:				STRING(255);				// Test-vars
	fbFile:					FB_File;					// Test-vars	
	fbList:					FB_ListSTRING;				// Test-vars
	fbBuilder:				FB_StringBuilder;			// Test-vars
	fbAssert:				FB_Assert;
	LREAL_ARRAY1:			ARRAY [0..10] OF LREAL;
	LREAL_ARRAY2:			ARRAY [0..10] OF LREAL;
	REAL_ARRAY3:			ARRAY [0..10] OF REAL;
	REAL_ARRAY4:			ARRAY [0..10] OF REAL;
	BOOL_ARRAY1:			ARRAY [0..10] OF BOOL;
	BOOL_ARRAY2:			ARRAY [0..10] OF BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Run
fbTestsuites();
fbTestsuites.P_Property.M_Add('Version', '1.0.0.4');

IF bExecute THEN
	bExecute:= NOT fbTestsuites.M_Request(E_Base.Execute);
END_IF

//// Add Testsuite to Testsuites
fbTestsuites.M_Add(fbTestsuite1);
{region "fbTestsuite1"}
// Run
fbTestsuite1();
fbTestsuite1.P_File:= 'FB_StringBuilder';

fbTestsuite1.P_Property.M_Add('Property1', 'Value1');
fbTestsuite1.P_Property.M_Add('Property2', 'Value2');
	 
CASE fbTestsuite1.P_Testcase OF
	E_Testcase.Start:
		// First test case
		fbBuilder.M_Reset().M_Append('Test').M_ToAny(sValue);
		fbTestsuite1.P_Assert.M_IsTRUE(sValue = 'Test', 'FB_StringBuilder.M_Append()');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 1);	
		
	1:
		fbBuilder.M_Reset().M_Append('Test').M_Append('-Test').M_ToAny(sValue);
		fbTestsuite1.P_Assert.M_IsTRUE(sValue = 'Test-Test', 'FB_StringBuilder.M_Append().M_Append()');
		fbTestsuite1.P_Assert.M_Equals_UDINT(9, fbBuilder.P_Length, 'fbBuilder.P_Length');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 2);
		
	2:
		fbBuilder.M_Reset().M_ToAny(sValue);
		fbTestsuite1.P_Assert.M_IsTRUE(sValue = '', 'FB_StringBuilder.M_Reset()');
		fbTestsuite1.P_Assert.M_Equals_UDINT(0, fbBuilder.P_Length, 'fbBuilder.P_Length');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 3);
	
	3:
		fbBuilder.M_Reset().M_AppendBOOL(TRUE).M_ToAny(sValue);
		fbTestsuite1.P_Assert.M_IsTRUE(sValue = 'TRUE', 'FB_StringBuilder.M_AppendBOOL()');
		fbTestsuite1.P_Assert.M_Equals_UDINT(4, fbBuilder.P_Length, 'fbBuilder.P_Length');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 4);
		
	4:
		fbBuilder.M_Reset().M_AppendINT(33).M_ToAny(sValue);
		fbTestsuite1.P_Assert.M_IsTRUE(sValue = '33', 'FB_StringBuilder.M_AppendBOOL()');
		fbTestsuite1.P_Assert.M_Equals_DINT(2, fbBuilder.P_Length, 'fbBuilder.P_Length');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 5);
		
	5:
		fbBuilder.M_Reset().M_AppendREAL(33.44, 2).M_ToAny(sValue);
		fbTestsuite1.P_Assert.M_IsTRUE(sValue = '33.44', 'FB_StringBuilder.M_AppendBOOL()');
		fbTestsuite1.P_Assert.M_Equals_DINT(5, fbBuilder.P_Length, 'fbBuilder.P_Length');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 6);
		
	6:
		sValue:= '';
		sValue:= fbBuilder.M_Reset().M_Append('Test').M_ToString();
		fbTestsuite1.P_Assert.M_Equals_STRING('Test', sValue, 'FB_StringBuilder.M_ToString()');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 7);
		
	7:
		fbTestsuite1.P_Assert.M_Equals_UDINT(6 , fbBuilder.M_Reset().M_Append('Test %s Test %s').M_Find('%s'), 'FB_StringBuilder.M_Replace()');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', 8);
			 
	8:
		fbTestsuite1.P_Assert.M_Equals_STRING('1Test %s Test %s' , fbBuilder.M_Reset().M_Append('Test %s Test %s').M_Insert(1, '1').M_ToString(), 'FB_StringBuilder.M_Replace()');
		fbTestsuite1.M_Testcase('FB_StringBuilder', T#1S, '', '', E_Testcase.Done);	
	E_Testcase.Done:;
	
END_CASE
{endregion}
	 
fbTestsuites.M_Add(fbTestsuite2);
{region "fbTestsuite2"}
fbTestsuite2();
CASE fbTestsuite2.P_Testcase OF
	E_Testcase.Start:
		fbList.M_Clear();
		FOR nIndex:= 0 TO 49 DO
			fbList.M_Add(INT_TO_STRING(nIndex));
		END_FOR
		fbTestsuite2.P_Assert.M_Equals_STRING('49', fbList.M_Item(fbList.P_Length - 1) ,'FB_ListSTRING.M_Item()');
		fbTestsuite2.P_Assert.M_Equals_STRING('10', fbList.M_Item(10) ,'FB_ListSTRING.M_Item()');
		fbTestsuite2.P_Assert.M_Equals_DINT(50, fbList.P_Length ,'FB_ListSTRING.P_Length');
		fbTestsuite2.M_Testcase('FB_ListSTRING', T#1S, '', '', 1);
	
	1:
		fbTestsuite2.P_Assert.M_IsTrue(fbList.M_Clear(), 'FB_ListSTRING.M_Clear()');
		fbTestsuite2.M_Testcase('FB_ListSTRING', T#1S, '', '', 2);		
	2:
		fbTestsuite2.P_Assert.M_IsTrue(fbList.M_Add('1'), 'FB_ListSTRING.M_Add()');
		fbTestsuite2.P_Assert.M_IsTrue(fbList.M_Add('3'), 'FB_ListSTRING.M_Add()');
		fbTestsuite2.P_Assert.M_IsTrue(fbList.M_Insert(1, '2'), 'FB_ListSTRING.M_Insert()');
		fbTestsuite2.M_Testcase('FB_ListSTRING', T#1S, '', '',3);	
		
	3:
		fbTestsuite2.P_Assert.M_Equals_STRING('2', fbList.M_Item(1), 'fbList.M_Item()');
		fbTestsuite2.M_Testcase('FB_ListSTRING', T#1S, '', '', E_Testcase.Done);	

	E_Testcase.Done:;
	
END_CASE
{endregion}
fbTestsuites.M_Add(fbTestsuite3);
{region "fbTestsuite3"}
fbTestsuite3();
CASE fbTestsuite3.P_Testcase OF
	E_Testcase.Start:
		fbTestsuite3.P_Assert.M_IsTRUE(fbFile.M_Delete('C:\Test.txt'), 'Delete old file');
		fbTestsuite3.M_Testcase('FB_File', T#1S, '', '', 1);			 
	
	1:			  
		fbTestsuite3.P_Assert.M_IsTRUE(fbFile.M_Create('C:\Test.txt'), 'fbFile.M_Create()');
		fbTestsuite3.M_Testcase('FB_File', T#1S, '', '', 2);
	2:
		fbTestsuite3.P_Assert.M_IsTRUE(fbFile.M_Append('TestString'), 'fbFile.M_Append()');
		fbTestsuite3.M_Testcase('FB_File', T#1S, '', '', 3);		
		
	3:
		fbTestsuite3.P_Assert.M_IsTRUE(fbFile.M_Close(), 'fbFile.M_Close()');
		fbTestsuite3.M_Testcase('FB_File', T#1S, '', '', 4);
		
	4:
		fbTestsuite3.P_Assert.M_IsTRUE(fbFile.M_Load('C:\Test.txt', sValue3), 'fbFile.M_Load()');
		fbTestsuite3.M_Testcase('FB_File', T#1S, '', '', 5);
			
	5:
		fbTestsuite3.P_Assert.M_Equals_STRING('TestString', sValue3, 'File content');
		fbTestsuite3.M_Testcase('FB_File', T#1S, '', '', 6);	
		
	6:
		fbTestsuite3.P_Assert.M_IsTRUE(fbFile.M_Close(), 'fbFile.M_Close()');
		fbTestsuite3.M_Testcase('FB_File', T#1S, '', '', 7);
		
	7:
		fbTestsuite3.P_Assert.M_IsTRUE(fbFile.M_Delete('C:\Test.txt'), 'fbFile.M_Delete()');
//			fbTestsuite3.P_Assert.M_Skip('blub');
		fbTestsuite3.M_Testcase('FB_File', T#1S, '', '', E_Testcase.Done);
		
	E_Testcase.Done:;
	
END_CASE
{endregion}
	 
fbTestsuites.M_Add(fbTestsuite4);
{region "fbTestsuite4"}
fbTestsuite4();
fbAssert.M_Reset();
CASE fbTestsuite4.P_Testcase OF
	E_Testcase.Start:
		 	memset(ADR(LREAL_ARRAY2), 0, SIZEOF(LREAL_ARRAY2));
		 	fbAssert.M_Equals_Array_LREAL(LREAL_ARRAY1, LREAL_ARRAY2, 0.0, 'LREAL Array passed');
		 	fbTestsuite4.P_Assert.M_Equals_DINT(1, fbAssert.nPassed, 'M_Equals_Array_LREAL');
			fbTestsuite4.M_Testcase('FB_Assert', T#1S, '', '', 1);
				 
		1:
			LREAL_ARRAY2[0]:= 1.1;
			fbAssert.M_Equals_Array_LREAL(LREAL_ARRAY1, LREAL_ARRAY2, 0.0, 'LREAL Array Faied');
			fbTestsuite4.P_Assert.M_Equals_DINT(1, fbAssert.nFailures, 'M_Equals_Array_LREAL');
			fbTestsuite4.M_Testcase('FB_Assert', T#1S, '', '', 2);		 
					  
		2:
		 	memset(ADR(REAL_ARRAY4), 0, SIZEOF(REAL_ARRAY4));
		 	fbAssert.M_Equals_Array_REAL(REAL_ARRAY3, REAL_ARRAY4, 0.0, 'REAL Array passed');
		 	fbTestsuite4.P_Assert.M_Equals_DINT(1, fbAssert.nPassed, 'M_Equals_Array_REAL');
			fbTestsuite4.M_Testcase('FB_Assert', T#1S, '', '', E_Testcase.Done);
		
		3:
			REAL_ARRAY4[0]:= 1.1;
			fbTestsuite4.P_Assert.M_Equals(REAL_ARRAY3, REAL_ARRAY4, 'REAL Array Faied');
			fbTestsuite4.M_Testcase('FB_Assert', T#1S, '', '', 4);
				 
		4:
			BOOL_ARRAY1[0]:= TRUE;
			fbTestsuite4.P_Assert.M_Equals(BOOL_ARRAY1, BOOL_ARRAY2, 'REAL Array Faied');
			fbTestsuite4.M_Testcase('FB_Assert', T#1S, '', '', E_Testcase.Done);

					   
		
	E_Testcase.Done:;
	
END_CASE
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>