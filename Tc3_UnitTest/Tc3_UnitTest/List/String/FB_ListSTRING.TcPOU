<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ListSTRING" Id="{a989d5e2-1cf5-0358-2412-01f34683c5c9}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call'} 
FUNCTION_BLOCK PUBLIC FB_ListSTRING IMPLEMENTS I_ListSTRING
VAR
	pList: 			POINTER TO STRING(255);
	nLength:		DINT;
	aList:			POINTER TO POINTER TO ARRAY [0..100] OF STRING(255):=ADR(pList);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{9a1b1e03-9c79-04ae-0e47-529adbf0eb35}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Add" Id="{fc95c475-02ce-0a23-3d94-22fd0ca885a7}">
      <Declaration><![CDATA[METHOD M_Add : BOOL
VAR_INPUT
	Value:		STRING(255);
END_VAR
VAR
	pOldList: 	POINTER TO STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// First Item
IF pList = 0 THEN
	nLength:= nLength + 1;
	pList:= __NEW(POINTER TO STRING(255), SIZEOF(STRING(255)));
ELSE
	// backup 
	pOldList:= pList;
	// new Length
	nLength:= nLength + 1;
	// new pointer
	pList:= __NEW(POINTER TO STRING(255),DINT_TO_UDINT(SIZEOF(STRING(255)) * nLength));
	// restore
	Memcpy(pList,pOldList, DINT_TO_UDINT(SIZEOF(STRING(255)) *(nLength -1)));
	// delete old
	__DELETE(pOldList);
END_IF

// add new Object
IF pList = 0 THEN
	RETURN;
END_IF
pList[nLength-1]:= Value;
M_Add:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Clear" Id="{0696c9f2-3368-02c7-3570-914b538477bb}">
      <Declaration><![CDATA[METHOD M_Clear : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pList <> 0 THEN
	nLength:= 0;
	__DELETE(pList);
	M_Clear:= TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Find" Id="{9af81950-5ba8-0340-3e5f-5b6e67170a1c}">
      <Declaration><![CDATA[METHOD M_Find : DINT
VAR_INPUT
	Value:		STRING(255);
END_VAR
VAR
	nIndex: 	UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Object already in List
M_Find := -1;
WHILE nIndex < nLength DO
    IF pList[nIndex] = Value THEN
        M_Find := nIndex;
        RETURN;
    END_IF
	nIndex := nIndex + 1;
END_WHILE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Index" Id="{f499fc6d-d45b-0ca4-2495-d9d9df4f4408}">
      <Declaration><![CDATA[METHOD M_Index : DINT
VAR_INPUT
	Value:	STRING(255);
END_VAR
VAR
	nIndex: 	DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Object already in List
M_Index := -1;
WHILE nIndex < nLength DO
  IF pList[nIndex] = Value THEN
        M_Index := nIndex;
        RETURN;
    END_IF
	nIndex := nIndex + 1;
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Insert" Id="{6d66fd7b-af1e-0a73-0590-29550cb06d1b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Insert : BOOL
VAR_INPUT
	Position:		DINT;
	Value:			STRING(255);
END_VAR
VAR
	pOldList: 		POINTER TO STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nLength > Position THEN
	// backup 
	pOldList:= pList;
	// new Length
	nLength:= nLength + 1;
	// new pointer
	pList:= __NEW(POINTER TO STRING(255),DINT_TO_UDINT(SIZEOF(STRING(255)) * nLength));
	// restore
	Memcpy(pList, pOldList, DINT_TO_UDINT(SIZEOF(STRING(255)) *(nLength -1)));
	MemMove(pList + DINT_TO_UDINT(SIZEOF(STRING(255)) * (Position + 1)), pList + DINT_TO_UDINT(SIZEOF(STRING(255)) * Position), DINT_TO_UDINT(SIZEOF(STRING(255)) * (nLength - Position + 1)));
	// delete old
	__DELETE(pOldList);
ELSE
	M_Insert:= FALSE;	
	RETURN;
END_IF
// add new Object
pList[Position]:= Value;
M_Insert:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Item" Id="{29e4159c-eed0-0b05-05f7-6ee207ca7daf}">
      <Declaration><![CDATA[METHOD M_Item : STRING(255)
VAR_INPUT
	Index: 	DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index < (nLength) THEN
	M_Item:= pList[Index];
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Remove" Id="{e45f8add-9693-0801-3102-f3924d7fbe37}">
      <Declaration><![CDATA[METHOD M_Remove : BOOL
VAR_INPUT
	Position:			DINT;
END_VAR
VAR
	pOldList:			POINTER TO STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// First Item
IF nLength >= Position THEN
	// backup 
	pOldList:= pList;
	// new Length
	nLength:= nLength -1;
	// new pointer
	pList:= __NEW(POINTER TO STRING(255),DINT_TO_UDINT(SIZEOF(STRING(255)) * nLength));
	// restore lower part
	Memcpy(pList,pOldList, SIZEOF(POINTER TO STRING(255)) * DINT_TO_UDINT(Position));
	//pList[nPosition]:= iObject;
	Memcpy(pList + (SIZEOF(STRING(255))*Position),pOldList + (SIZEOF(STRING(255))*(Position + 1)), SIZEOF(STRING(255)) * DINT_TO_UDINT(nLength - Position));
	// delete old
	__DELETE(pOldList);
ELSE
	M_Remove:= FALSE;	
	RETURN;
END_IF
M_Remove:= TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Set" Id="{cbc5c041-51fe-0879-2b00-d2e13e08e069}">
      <Declaration><![CDATA[METHOD PUBLIC M_Set : BOOL
VAR_INPUT
	Index:			DINT;
	Value:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index < (nLength) THEN
	pList[Index]:= Value;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Length" Id="{4be58bcd-8d3b-06e7-25c0-02f6b9f73cce}">
      <Declaration><![CDATA[PROPERTY P_Length : DINT
]]></Declaration>
      <Get Name="Get" Id="{ebd53a4d-532d-0f16-0572-d7a706cbf043}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Length:= nLength;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_ListSTRING">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListSTRING.FB_exit">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListSTRING.M_Add">
      <LineId Id="46" Count="4" />
      <LineId Id="53" Count="9" />
      <LineId Id="85" Count="0" />
      <LineId Id="67" Count="1" />
      <LineId Id="93" Count="2" />
      <LineId Id="69" Count="1" />
    </LineIds>
    <LineIds Name="FB_ListSTRING.M_Clear">
      <LineId Id="3" Count="2" />
      <LineId Id="7" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListSTRING.M_Find">
      <LineId Id="66" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListSTRING.M_Index">
      <LineId Id="45" Count="8" />
    </LineIds>
    <LineIds Name="FB_ListSTRING.M_Insert">
      <LineId Id="15" Count="0" />
      <LineId Id="18" Count="7" />
      <LineId Id="37" Count="0" />
      <LineId Id="26" Count="5" />
      <LineId Id="34" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListSTRING.M_Item">
      <LineId Id="30" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListSTRING.M_Remove">
      <LineId Id="124" Count="17" />
      <LineId Id="72" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListSTRING.M_Set">
      <LineId Id="10" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListSTRING.P_Length.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>