<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_ListObject" Id="{80a15822-49de-454f-b0fc-12851675b870}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no_explicit_call'} 
FUNCTION_BLOCK PUBLIC FB_ListObject IMPLEMENTS I_ListObject
VAR
	pList: 			POINTER TO I_Object;
	nLength:		DINT;
	aList:			POINTER TO POINTER TO ARRAY [0..100] OF I_Object:=ADR(pList);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_exit" Id="{206ba99c-f43a-4ef7-9ab3-3aa10406299c}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Add" Id="{a38c7fef-d96a-4183-97fc-f0e5fdcf0ccf}">
      <Declaration><![CDATA[METHOD M_Add : BOOL
VAR_INPUT
	Object: 	I_Object;
END_VAR
VAR
	pOldList: 	POINTER TO I_Object;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Object <> 0 THEN
	// First Item
	IF pList = 0 THEN
		nLength:= nLength + 1;
		pList:= __NEW(POINTER TO I_Object,DINT_TO_UDINT(nLength));
	ELSE
		// Item already in List
		IF M_Find(Object) = -1 THEN
			// backup 
			pOldList:= pList;
			// new Length
			nLength:= nLength + 1;
			// new pointer
			pList:= __NEW(POINTER TO I_Object,DINT_TO_UDINT(nLength));
			// restore
			Memcpy(pList,pOldList, SIZEOF(POINTER TO I_Object)*DINT_TO_UDINT(nLength -1));
			// delete old
			__DELETE(pOldList);
		ELSE
			M_Add:= FALSE;	
			RETURN;
		END_IF
	END_IF
	IF pList = 0 THEN
		RETURN;
	END_IF
	// add new Object
	pList[nLength-1]:= Object;
	M_Add:= TRUE;
ELSE
	M_Add:= FALSE;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Clear" Id="{bb7164ec-9ad3-43d2-bddd-bf3368367664}">
      <Declaration><![CDATA[METHOD M_Clear
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pList <> 0 THEN
	nLength:= 0;
	__DELETE(pList);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Find" Id="{b4574359-c512-4073-955e-3a3fc1e43b2b}">
      <Declaration><![CDATA[METHOD M_Find : DINT
VAR_INPUT
	Object: 	I_Object;
END_VAR
VAR
	nIndex: 	UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Object already in List
M_Find := -1;
WHILE nIndex < nLength DO
    IF (pList[nIndex] = Object) THEN
        M_Find := nIndex;
        RETURN;
    END_IF
	nIndex := nIndex + 1;
END_WHILE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Get" Id="{d9624459-7fd8-4784-aea6-5c773f6a64a0}">
      <Declaration><![CDATA[METHOD M_Get : I_Object
VAR_INPUT
	Index: 	DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index <= nLength THEN
	M_Get:= pList[Index];
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Index" Id="{a8754c07-7f0e-4184-834d-318ea0557896}">
      <Declaration><![CDATA[METHOD M_Index : DINT
VAR_INPUT
	Object: 	I_Object;
END_VAR
VAR
	nIndex: 	DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Object already in List
M_Index := -1;
WHILE nIndex < nLength DO
    IF (pList[nIndex] = Object) THEN
        M_Index := nIndex;
        RETURN;
    END_IF
	nIndex := nIndex + 1;
END_WHILE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Remove" Id="{e3d569c0-1249-4bbc-9b3c-c9d8221349af}">
      <Declaration><![CDATA[METHOD M_Remove : BOOL
VAR_INPUT
	Object: 	I_Object;
END_VAR
VAR
	pOldList:			POINTER TO I_Object;
	nPosition: 			DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Object <> 0 THEN
	// First Item
	IF nLength >= 0 THEN
		// Item already in List
		nPosition:= M_Find(Object);
		IF nPosition <> -1 THEN
			// backup 
			pOldList:= pList;
			// new Length
			nLength:= nLength -1;
			// new pointer
			pList:= __NEW(POINTER TO I_Object,DINT_TO_UDINT(nLength));
			// restore lower part
			Memcpy(pList,pOldList, SIZEOF(POINTER TO I_Object) * DINT_TO_UDINT(nPosition));
			//pList[nPosition]:= iObject;
			Memcpy(pList + (SIZEOF(POINTER TO I_Object)*nPosition),pOldList + (SIZEOF(POINTER TO I_Object)*(nPosition + 1)), SIZEOF(POINTER TO I_Object) * DINT_TO_UDINT(nLength - nPosition));
			// delete old
			__DELETE(pOldList);
		ELSE
			M_Remove:= FALSE;	
			RETURN;
		END_IF
	ELSE
		M_Remove:= FALSE;	
		RETURN;
	END_IF
	M_Remove:= TRUE;
ELSE
	M_Remove:= FALSE;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="P_Length" Id="{0b018640-abb2-489d-958f-1e0d7c39741f}">
      <Declaration><![CDATA[PROPERTY P_Length : DINT
]]></Declaration>
      <Get Name="Get" Id="{394102f8-8cf0-4f3e-a868-8eb035088153}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_Length:= nLength;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_ListObject">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListObject.FB_exit">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListObject.M_Add">
      <LineId Id="164" Count="22" />
      <LineId Id="200" Count="1" />
      <LineId Id="199" Count="0" />
      <LineId Id="187" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListObject.M_Clear">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListObject.M_Find">
      <LineId Id="66" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListObject.M_Get">
      <LineId Id="13" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListObject.M_Index">
      <LineId Id="66" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListObject.M_Remove">
      <LineId Id="132" Count="28" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ListObject.P_Length.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>