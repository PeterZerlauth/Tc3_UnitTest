<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Assert" Id="{a8219960-23df-08de-19e5-3265dc5cd828}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Assert IMPLEMENTS I_Assert
VAR_INPUT
END_VAR
VAR_OUTPUT
	fbList:					FB_ListSTRING;
	nAssert:				DINT;
	nPassed:				DINT;
	nSkipped:				DINT;
	nFailures:				DINT;
	nErrors:				DINT;
END_VAR
VAR
	fbJson:					FB_JsonSaxWriter;
  	fbJsonDataType:			FB_JsonReadWriteDataType;
	fbBuilder:				FB_StringBuilder;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="M_Assert" Id="{20d02a5f-db58-0c6c-14cd-0b5cd69f1cdb}">
      <Declaration><![CDATA[METHOD PUBLIC M_Assert
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nSkipped = 0 THEN
	nAssert:= nAssert + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals" Id="{3c2618ac-fc8f-0172-07dd-058342c6439f}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals : I_Assert
VAR_INPUT
	Expected:			ANY;			// Expected as udint
    Actual:				ANY;          	// Actual as udint
	Message:			STRING(255);   	// Message as string
END_VAR
VAR
	sJsonExpected:			STRING(2000);
	sJsonActual:			STRING(2000); 
	sDatatypeExpected:		STRING(255); 
	sDatatypeActual:		STRING(255);
END_VAR
                          ]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();

fbJson.ResetDocument();
sDatatypeExpected:= fbJsonDataType.GetDatatypeNameByAddress(nData:= DINT_TO_UDINT(Expected.diSize), pData:= Expected.pValue);
fbJsonDataType.AddJsonValueFromSymbol(fbJson, sDatatypeExpected, DINT_TO_UDINT(Expected.diSize), Expected.pValue);
fbJson.CopyDocument(sJsonExpected, SIZEOF(sJsonExpected));

fbJson.ResetDocument();
sDatatypeActual:= fbJsonDataType.GetDatatypeNameByAddress(nData:= DINT_TO_UDINT(Actual.diSize), pData:= Actual.pValue);
fbJsonDataType.AddJsonValueFromSymbol(fbJson, sDatatypeActual, DINT_TO_UDINT(Actual.diSize), Actual.pValue);
fbJson.CopyDocument(sJsonActual, SIZEOF(sJsonActual));

IF sDatatypeExpected <> sDatatypeActual THEN
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = ');
	fbBuilder.M_Append(sDatatypeExpected);
	fbBuilder.M_Append(' Actual = ');
	fbBuilder.M_Append(sDatatypeActual);
	M_Failure(fbBuilder.M_ToString(), Message);
ELSIF sJsonExpected <> sJsonActual THEN
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = ');
	fbBuilder.M_Append(sJsonExpected);
	fbBuilder.M_Append(' Actual = ');
	fbBuilder.M_Append(sJsonActual);
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_ANY_Old" Id="{d6bff329-0902-018a-3953-76060d68264d}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_ANY_Old : I_Assert
VAR_INPUT
	Expected:			ANY;					// Expected
	Actual:				ANY;					// Actual
	Message:			STRING(255);			// Message as string
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Equals_ANY_Old:= THIS^;
M_Assert();
IF Expected.diSize <> Actual.diSize THEN
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected size = "');
	fbBuilder.M_Append(DINT_TO_STRING(Expected.diSize));
	fbBuilder.M_Append('" Actual size = "');
	fbBuilder.M_Append(DINT_TO_STRING(Actual.diSize));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
	RETURN;
ELSIF Expected.TypeClass <> Actual.TypeClass THEN
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected typeclass = "');
	fbBuilder.M_Append(TO_STRING(Expected.TypeClass));
	fbBuilder.M_Append('" Actual typeclass = "');
	fbBuilder.M_Append(TO_STRING(Actual.TypeClass));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
	RETURN;
ELSIF MEMCMP(Expected.pValue, Actual.pValue, DINT_TO_UDINT( Expected.diSize)) <> 0 THEN
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected != Actual');
	M_Failure(fbBuilder.M_ToString(), Message);
	RETURN;
ELSE
	M_Passed();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_Array_BOOL" Id="{f134011c-e659-0f0f-1451-e11b2d1801b6}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_Array_BOOL : I_Assert
VAR_IN_OUT
	Expected:			ARRAY [*] OF BOOL;		// Expected as array of bool
	Actual:				ARRAY [*] OF BOOL;		// Actual as array of bool
END_VAR
VAR_INPUT
	Message:			STRING(255);			// Message as string
END_VAR

VAR
	nIndex:				DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Equals_Array_BOOL:= THIS^;
M_Assert();
IF LOWER_BOUND(Expected, 1) <> LOWER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSIF UPPER_BOUND(Expected, 1) <> UPPER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSE
	FOR nIndex:= LOWER_BOUND(Expected, 1) TO UPPER_BOUND(Expected, 1) DO
		IF Expected[nIndex] <> Actual[nIndex] THEN	
			fbBuilder.M_Reset();
			fbBuilder.M_Append('Index = "');
			fbBuilder.M_Append(DINT_TO_STRING(nIndex));
			fbBuilder.M_Append('" Expected = "');
			fbBuilder.M_Append(BOOL_TO_STRING(Expected[nIndex]));
			fbBuilder.M_Append('" Actual = "');
			fbBuilder.M_Append(BOOL_TO_STRING(Actual[nIndex]));
			fbBuilder.M_Append('"');
			M_Failure(fbBuilder.M_ToString(), Message);
			RETURN;
		END_IF
	END_FOR
	M_Passed();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_Array_BYTE" Id="{12f09544-1af8-0ebe-07a7-8b9c32b9d2dc}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_Array_BYTE : I_Assert
VAR_IN_OUT
	Expected:			ARRAY [*] OF BYTE;	// Expected as array of byte
	Actual:				ARRAY [*] OF BYTE;	// Actual as array of byte
END_VAR                                   
VAR_INPUT                                 
	Message:			STRING(255);     	 // Message as string
END_VAR

VAR
	nIndex:				DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Equals_Array_BYTE:= THIS^;
M_Assert();
IF LOWER_BOUND(Expected, 1) <> LOWER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSIF UPPER_BOUND(Expected, 1) <> UPPER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSE
	FOR nIndex:= LOWER_BOUND(Expected, 1) TO UPPER_BOUND(Expected, 1) DO
		IF Expected[nIndex] <> Actual[nIndex] THEN	
			fbBuilder.M_Reset();
			fbBuilder.M_Append('Index = "');
			fbBuilder.M_Append(DINT_TO_STRING(nIndex));
			fbBuilder.M_Append('" Expected = "');
			fbBuilder.M_Append(BYTE_TO_STRING(Expected[nIndex]));
			fbBuilder.M_Append('" Actual = "');
			fbBuilder.M_Append(BYTE_TO_STRING(Actual[nIndex]));
			fbBuilder.M_Append('"');
			M_Failure(fbBuilder.M_ToString(), Message);
			RETURN;
		END_IF
	END_FOR
	M_Passed();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_Array_DINT" Id="{518ae4ab-060a-09e2-266f-8d59ac7249b8}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_Array_DINT : I_Assert
VAR_IN_OUT
	Expected:			ARRAY [*] OF DINT;	// Expected as array of dint
	Actual:				ARRAY [*] OF DINT;	// Actual as array of dint
END_VAR                                   
VAR_INPUT                                 
	Message:			STRING(255);       // Message as string
END_VAR

VAR
	nIndex:				DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Equals_Array_DINT:= THIS^;
M_Assert();
IF LOWER_BOUND(Expected, 1) <> LOWER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSIF UPPER_BOUND(Expected, 1) <> UPPER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSE
	FOR nIndex:= LOWER_BOUND(Expected, 1) TO UPPER_BOUND(Expected, 1) DO
		IF Expected[nIndex] <> Actual[nIndex] THEN	
			fbBuilder.M_Reset();
			fbBuilder.M_Append('Index = "');
			fbBuilder.M_Append(DINT_TO_STRING(nIndex));
			fbBuilder.M_Append('" Expected = "');
			fbBuilder.M_Append(DINT_TO_STRING(Expected[nIndex]));
			fbBuilder.M_Append('" Actual = "');
			fbBuilder.M_Append(DINT_TO_STRING(Actual[nIndex]));
			fbBuilder.M_Append('"');
			M_Failure(fbBuilder.M_ToString(), Message);
			RETURN;
		END_IF
	END_FOR
	M_Passed();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_Array_INT" Id="{6713325b-4c44-0e26-2bb7-5e725aa270d3}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_Array_INT : I_Assert
VAR_IN_OUT
	Expected:			ARRAY [*] OF INT;	// Expected as array of int
	Actual:				ARRAY [*] OF INT;	// Actual as array of int
END_VAR                                  
VAR_INPUT                                
	Message:			STRING(255);      // Message as string
END_VAR

VAR
	nIndex:				DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Equals_Array_INT:= THIS^;
M_Assert();
IF LOWER_BOUND(Expected, 1) <> LOWER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSIF UPPER_BOUND(Expected, 1) <> UPPER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSE
	FOR nIndex:= LOWER_BOUND(Expected, 1) TO UPPER_BOUND(Expected, 1) DO
		IF Expected[nIndex] <> Actual[nIndex] THEN	
			fbBuilder.M_Reset();
			fbBuilder.M_Append('Index = "');
			fbBuilder.M_Append(DINT_TO_STRING(nIndex));
			fbBuilder.M_Append('" Expected = "');
			fbBuilder.M_Append(INT_TO_STRING(Expected[nIndex]));
			fbBuilder.M_Append('" Actual = "');
			fbBuilder.M_Append(INT_TO_STRING(Actual[nIndex]));
			fbBuilder.M_Append('"');
			M_Failure(fbBuilder.M_ToString(), Message);
			RETURN;
		END_IF
	END_FOR
	M_Passed();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_Array_LINT" Id="{ad7b55f1-407d-0125-1100-b2f5a1a335ce}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_Array_LINT : I_Assert
VAR_IN_OUT
	Expected:			ARRAY [*] OF LINT;	// Expected as array of lint
	Actual:				ARRAY [*] OF LINT;	// Actual as array of lint
END_VAR                                   
VAR_INPUT                                 
	Message:			STRING(255);       // Message as string
END_VAR

VAR
	nIndex:				DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Equals_Array_LINT:= THIS^;
M_Assert();
IF LOWER_BOUND(Expected, 1) <> LOWER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSIF UPPER_BOUND(Expected, 1) <> UPPER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSE
	FOR nIndex:= LOWER_BOUND(Expected, 1) TO UPPER_BOUND(Expected, 1) DO
		IF Expected[nIndex] <> Actual[nIndex] THEN	
			fbBuilder.M_Reset();
			fbBuilder.M_Append('Index = "');
			fbBuilder.M_Append(DINT_TO_STRING(nIndex));
			fbBuilder.M_Append('" Expected = "');
			fbBuilder.M_Append(LINT_TO_STRING(Expected[nIndex]));
			fbBuilder.M_Append('" Actual = "');
			fbBuilder.M_Append(LINT_TO_STRING(Actual[nIndex]));
			fbBuilder.M_Append('"');
			M_Failure(fbBuilder.M_ToString(), Message);
			RETURN;
		END_IF
	END_FOR
	M_Passed();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_Array_LREAL" Id="{c66fd740-f5b0-0aea-32aa-9f9e8cd1f3c8}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_Array_LREAL : I_Assert
VAR_IN_OUT
	Expected:			ARRAY [*] OF LREAL;	// Expected as array of lreal
	Actual:				ARRAY [*] OF LREAL;	// Actual as array of lreal
END_VAR                                    
VAR_INPUT                                  
	Tolerance:			LREAL;              // Tolerance as lreal
	Message:			STRING(255);		// Message as string
END_VAR

VAR
	nIndex:				DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Equals_Array_LREAL:= THIS^;
M_Assert();
IF LOWER_BOUND(Expected, 1) <> LOWER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSIF UPPER_BOUND(Expected, 1) <> UPPER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSE
	FOR nIndex:= LOWER_BOUND(Expected, 1) TO UPPER_BOUND(Expected, 1) DO
		IF ABS(Expected[nIndex] - Actual[nIndex]) > ABS(Tolerance) THEN	
			fbBuilder.M_Reset();
			fbBuilder.M_Append('Index = "');
			fbBuilder.M_Append(DINT_TO_STRING(nIndex));
			fbBuilder.M_Append('" Expected = "');
			fbBuilder.M_Append(LREAL_TO_STRING(Expected[nIndex]));
			fbBuilder.M_Append('" Actual = "');
			fbBuilder.M_Append(LREAL_TO_STRING(Actual[nIndex]));
			fbBuilder.M_Append('" Tolerance = "');
			fbBuilder.M_Append(LREAL_TO_STRING(Tolerance));
			fbBuilder.M_Append('"');
			M_Failure(fbBuilder.M_ToString(), Message);
			RETURN;
		END_IF
	END_FOR
	M_Passed();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_Array_REAL" Id="{4fd08f76-ba10-092b-0f97-d99ee406f12f}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_Array_REAL : I_Assert
VAR_IN_OUT
	Expected:			ARRAY [*] OF REAL;	// Expected as array of real
	Actual:				ARRAY [*] OF REAL;	// Actual as array of real
END_VAR                                   
VAR_INPUT                                 
	Tolerance:			REAL;             	// Tolerance as real
	Message:			STRING(255);      	// Message as string
END_VAR

VAR
	nIndex:				DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Equals_Array_REAL:= THIS^;
M_Assert();
IF LOWER_BOUND(Expected, 1) <> LOWER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSIF UPPER_BOUND(Expected, 1) <> UPPER_BOUND(Actual, 1) THEN
	M_Failure('', Message);
ELSE
	FOR nIndex:= LOWER_BOUND(Expected, 1) TO UPPER_BOUND(Expected, 1) DO
		IF ABS(Expected[nIndex] - Actual[nIndex]) > ABS(Tolerance) THEN	
			fbBuilder.M_Reset();
			fbBuilder.M_Append('Index = "');
			fbBuilder.M_Append(DINT_TO_STRING(nIndex));
			fbBuilder.M_Append('" Expected = "');
			fbBuilder.M_Append(REAL_TO_STRING(Expected[nIndex]));
			fbBuilder.M_Append('" Actual = "');
			fbBuilder.M_Append(REAL_TO_STRING(Actual[nIndex]));
			fbBuilder.M_Append('" Tolerance = "');
			fbBuilder.M_Append(REAL_TO_STRING(Tolerance));
			fbBuilder.M_Append('"');
			M_Failure(fbBuilder.M_ToString(), Message);
			RETURN;
		END_IF
	END_FOR
	M_Passed();
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_BOOL" Id="{a59ebe08-8964-0b2c-38a4-ac8145e6076b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_BOOL : I_Assert
VAR_INPUT
	Expected:			BOOL;				// Expected as bool
    Actual:				BOOL;           	// Actual as bool
	Message:			STRING(255);    	// Message as string
END_VAR                                                                       	]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(BOOL_TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(BOOL_TO_STRING(Actual));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_BOOL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_BYTE" Id="{2d0157fb-a7a4-0a24-2f21-b00692b22401}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_BYTE : I_Assert
VAR_INPUT
	Expected:			BYTE;			// Expected as byte
    Actual:				BYTE;           // Actual as byte
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(BYTE_TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(BYTE_TO_STRING(Actual));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_BYTE:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_DINT" Id="{472197bd-33d6-0fc3-0f19-0526022a1a63}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_DINT : I_Assert
VAR_INPUT
	Expected:			DINT;			// Expected as dint
    Actual:				DINT;           // Actual as dint
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(DINT_TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(DINT_TO_STRING(Actual));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_DINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_INT" Id="{69d1cbc7-70c0-0cef-01a9-39c278d3ddf8}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_INT : I_Assert
VAR_INPUT
	Expected:			INT;			// Expected as int
    Actual:				INT;            // Actual as int
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(INT_TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(INT_TO_STRING(Actual));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_INT:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_LINT" Id="{a849c410-b14f-0b59-2551-ae0df6d9a14d}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_LINT : I_Assert
VAR_INPUT
	Expected:			LINT;			// Expected as lint
    Actual:				LINT;           // Actual as lint
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(LINT_TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(LINT_TO_STRING(Actual));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_LINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_LREAL" Id="{56afa40f-43c1-0c87-2e3a-7092c4bb5d6b}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_LREAL : I_Assert
VAR_INPUT
	Expected:			LREAL;				// Expected as lreal
    Actual:				LREAL;              // Actual as lreal
	Tolerance:			LREAL;             	// Tolerance as lreal         
	Message:			STRING(255);		// Message as string
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF LrealIsNaN(Expected) THEN
	M_Failure('', Concat('Expected is NaN ', Message));
ELSIF LrealIsNaN(Actual) THEN
	M_Failure('', Concat('Actual is NaN ', Message));	
ELSIF LrealIsNaN(Tolerance) THEN
	M_Failure('', Concat('Tolerance is NaN ', Message));	
ELSIF ABS(Expected - Actual) <= ABS(Tolerance) THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(LREAL_TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(LREAL_TO_STRING(Actual));
	fbBuilder.M_Append('" Tolerance = "');
	fbBuilder.M_Append(LREAL_TO_STRING(Tolerance));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_LREAL:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_REAL" Id="{d6abdbdc-3ed4-0597-3832-aa884ad8510e}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_REAL : I_Assert
VAR_INPUT
	Expected:			REAL;			// Expected as real
    Actual:				REAL;           // Actual as real
	Tolerance:			REAL;           // Tolerance as real    
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF RealIsNaN(Expected) THEN
	M_Failure('', Concat('Expected is NaN ', Message));
ELSIF RealIsNaN(Actual) THEN
	M_Failure('', Concat('Actual is NaN ', Message));	
ELSIF RealIsNaN(Tolerance) THEN
	M_Failure('', Concat('Tolerance is NaN ', Message));	
ELSIF ABS(Expected - Actual) <= ABS(Tolerance) THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(LREAL_TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(LREAL_TO_STRING(Actual));
	fbBuilder.M_Append('" Tolerance = "');
	fbBuilder.M_Append(LREAL_TO_STRING(Tolerance));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_REAL:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_STRING" Id="{be4cf22a-d59c-479d-91df-27b8c49cf405}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_STRING : I_Assert
VAR_INPUT
	Expected:			STRING(255);		// Expected as string
    Actual:				STRING(255);        // Actual as string
	Message:			STRING(255);      	// Message as string  
END_VAR                                  ]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(Expected);
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(Actual);
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_STRING:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_TIME" Id="{91b48555-653d-0553-104e-334d1e902474}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_TIME : I_Assert
VAR_INPUT
	Expected:			TIME;				// Expected as time
    Actual:				TIME;               // Actual as time
	Tolerance:			TIME;               // Tolerance as time    
	Message:			STRING(255);        // Message as string
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF ABS(Expected - Actual) <= ABS(Tolerance) THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(TIME_TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(TIME_TO_STRING(Actual));
	fbBuilder.M_Append('" Tolerance = "');
	fbBuilder.M_Append(TIME_TO_STRING(Tolerance));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_TIME:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_UDINT" Id="{dab23cde-89d2-0c20-3b51-ea863cfc23a2}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_UDINT : I_Assert
VAR_INPUT
	Expected:			UDINT;			// Expected as udint
    Actual:				UDINT;          // Actual as udint
	Message:			STRING(255);   	// Message as string
END_VAR                                 ]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(UDINT_TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(UDINT_TO_STRING(Actual));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_UDINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_UINT" Id="{d4264b4a-bfbe-0a03-22f6-a7578de8f804}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_UINT : I_Assert
VAR_INPUT
	Expected:			UINT;			// Expected as uint
    Actual:				UINT;           // Actual as uint
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(UINT_TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(UINT_TO_STRING(Actual));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_UINT:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_ULINT" Id="{6a3deaae-41c3-057d-0ef8-285e9e3cbbcc}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_ULINT : I_Assert
VAR_INPUT
	Expected:			ULINT;			// Expected as ulint
    Actual:				ULINT;          // Actual as ulint
	Message:			STRING(255);    // Message as string
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(ULINT_TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(ULINT_TO_STRING(Actual));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_ULINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_UXINT" Id="{9ad6b90f-546b-059c-11ae-1d602d76ab79}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_UXINT : I_Assert
VAR_INPUT
	Expected:			UXINT;			// Expected as udint
    Actual:				UXINT;          // Actual as udint
	Message:			STRING(255);   	// Message as string
END_VAR                                 ]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(TO_STRING(Actual));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_UXINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_WSTRING" Id="{d57eeb77-552a-03e8-31d9-648afdaf68b1}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_WSTRING : I_Assert
VAR_INPUT
	Expected:			WSTRING(255);		// Expected as wstring
    Actual:				WSTRING(255);       // Actual as wstring
	Message:			STRING(255);        // Message as string
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(WSTRING_TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(WSTRING_TO_STRING(Actual));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_WSTRING:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_XINT" Id="{c5bc8c09-efe4-007f-174c-3880dc641861}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_XINT : I_Assert
VAR_INPUT
	Expected:			XINT;			// Expected as udint
    Actual:				XINT;          // Actual as udint
	Message:			STRING(255);   	// Message as string
END_VAR                                 ]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(TO_STRING(Actual));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_XINT:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Equals_XWORD" Id="{3e7a48b1-bf26-0599-1212-743a1c4b8999}">
      <Declaration><![CDATA[METHOD PUBLIC M_Equals_XWORD : I_Assert
VAR_INPUT
	Expected:			XWORD;			// Expected as udint
    Actual:				XWORD;          // Actual as udint
	Message:			STRING(255);   	// Message as string
END_VAR                                 ]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Expected = Actual THEN
	M_Passed();
ELSE
	fbBuilder.M_Reset();
	fbBuilder.M_Append('Expected = "');
	fbBuilder.M_Append(TO_STRING(Expected));
	fbBuilder.M_Append('" Actual = "');
	fbBuilder.M_Append(TO_STRING(Actual));
	fbBuilder.M_Append('"');
	M_Failure(fbBuilder.M_ToString(), Message);
END_IF
M_Equals_XWORD:= THIS^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Error" Id="{8fb01682-0d3e-09d1-1052-e80c2a25c45c}">
      <Declaration><![CDATA[METHOD PUBLIC M_Error
VAR_INPUT
	Data:				STRING(255);
	Message:			STRING(255);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nSkipped = 0 THEN
	fbBuilder.M_Reset();
	fbBuilder.M_Append('$T$T$T<error message="');
	fbBuilder.M_Append(Message);
	fbBuilder.M_Append('" type="ArithmeticError">');
	fbBuilder.M_Append(Data);	
	fbBuilder.M_Append('</error>');
	fbList.M_Add(fbBuilder.M_ToString());
	nErrors:= nErrors + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Failure" Id="{c1dc23cc-f885-0540-1115-b7058773bd0a}">
      <Declaration><![CDATA[METHOD PUBLIC M_Failure
VAR_INPUT
	Data:				STRING(255);
	Message:			STRING(255);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nSkipped = 0 THEN
	fbBuilder.M_Reset();
	fbBuilder.M_Append('$T$T$T<failure message="');
	fbBuilder.M_Append(Message);
	fbBuilder.M_Append('" type="AssertionError">');
	fbBuilder.M_Append(Data);
	fbBuilder.M_Append('</failure>');
	fbList.M_Add(fbBuilder.M_ToString());
	nFailures:= nFailures + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_IsTRUE" Id="{ff21833d-ba1f-05de-0ce2-388ab8c48e28}">
      <Declaration><![CDATA[METHOD PUBLIC M_IsTRUE : I_Assert
VAR_INPUT
    Actual:				BOOL;				// Actual as bool
	Message:			STRING(255);        // Message as string
END_VAR                                     
                                            
                                            ]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_Assert();
IF Actual THEN
	M_Passed();
ELSE
	M_Failure('Actual = "FALSE"', Message);
END_IF
M_IsTRUE:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Passed" Id="{0da5074d-f435-0060-10d7-5f55502ee455}">
      <Declaration><![CDATA[METHOD PUBLIC M_Passed
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nSkipped = 0 THEN
	nPassed:= nPassed + 1;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Reset" Id="{968629c2-18de-07f2-0ab0-109e8e7d42c9}">
      <Declaration><![CDATA[METHOD PUBLIC M_Reset : I_Assert
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbList.M_Clear();
nAssert:= 0;
nPassed:= 0;
nSkipped:= 0;
nFailures:= 0;
nErrors:= 0;
M_Reset:= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_Skip" Id="{01e03b07-71f0-0cb8-3278-37acfad51370}">
      <Declaration><![CDATA[METHOD PUBLIC M_Skip
VAR_INPUT
	Message:			STRING(255);	// Message as string
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbList.M_Clear();
nAssert:= 0;
nPassed:= 0;
nFailures:= 0;
nErrors:= 0;
fbBuilder.M_Reset();
fbBuilder.M_Append('$T$T$T<skipped message="');
fbBuilder.M_Append(Message);
fbBuilder.M_Append('" />');
fbList.M_Add(fbBuilder.M_ToString());
nSkipped:= nSkipped + 1;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Assert">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Assert">
      <LineId Id="7" Count="2" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals">
      <LineId Id="224" Count="24" />
      <LineId Id="250" Count="2" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_ANY_Old">
      <LineId Id="775" Count="26" />
      <LineId Id="655" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_Array_BOOL">
      <LineId Id="482" Count="2" />
      <LineId Id="654" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="660" Count="1" />
      <LineId Id="658" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="680" Count="7" />
      <LineId Id="665" Count="0" />
      <LineId Id="667" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="655" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_Array_BYTE">
      <LineId Id="482" Count="2" />
      <LineId Id="654" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="660" Count="1" />
      <LineId Id="658" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="680" Count="7" />
      <LineId Id="665" Count="0" />
      <LineId Id="667" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="655" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_Array_DINT">
      <LineId Id="482" Count="2" />
      <LineId Id="654" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="660" Count="1" />
      <LineId Id="658" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="680" Count="7" />
      <LineId Id="665" Count="0" />
      <LineId Id="667" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="655" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_Array_INT">
      <LineId Id="482" Count="2" />
      <LineId Id="654" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="660" Count="1" />
      <LineId Id="658" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="680" Count="7" />
      <LineId Id="665" Count="0" />
      <LineId Id="667" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="655" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_Array_LINT">
      <LineId Id="482" Count="2" />
      <LineId Id="654" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="660" Count="1" />
      <LineId Id="658" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="680" Count="7" />
      <LineId Id="665" Count="0" />
      <LineId Id="667" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="655" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_Array_LREAL">
      <LineId Id="482" Count="2" />
      <LineId Id="654" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="660" Count="1" />
      <LineId Id="658" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="681" Count="2" />
      <LineId Id="687" Count="1" />
      <LineId Id="684" Count="1" />
      <LineId Id="701" Count="1" />
      <LineId Id="686" Count="0" />
      <LineId Id="665" Count="0" />
      <LineId Id="667" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="655" Count="0" />
      <LineId Id="489" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_Array_REAL">
      <LineId Id="482" Count="2" />
      <LineId Id="654" Count="0" />
      <LineId Id="656" Count="0" />
      <LineId Id="660" Count="1" />
      <LineId Id="658" Count="0" />
      <LineId Id="662" Count="0" />
      <LineId Id="681" Count="2" />
      <LineId Id="687" Count="1" />
      <LineId Id="684" Count="1" />
      <LineId Id="701" Count="1" />
      <LineId Id="686" Count="0" />
      <LineId Id="665" Count="0" />
      <LineId Id="667" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="663" Count="0" />
      <LineId Id="668" Count="0" />
      <LineId Id="655" Count="0" />
      <LineId Id="489" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_BOOL">
      <LineId Id="82" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="105" Count="5" />
      <LineId Id="95" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_BYTE">
      <LineId Id="116" Count="0" />
      <LineId Id="93" Count="2" />
      <LineId Id="123" Count="4" />
      <LineId Id="122" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_DINT">
      <LineId Id="108" Count="0" />
      <LineId Id="111" Count="2" />
      <LineId Id="140" Count="4" />
      <LineId Id="139" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_INT">
      <LineId Id="89" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="120" Count="5" />
      <LineId Id="114" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_LINT">
      <LineId Id="134" Count="0" />
      <LineId Id="111" Count="2" />
      <LineId Id="140" Count="5" />
      <LineId Id="133" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_LREAL">
      <LineId Id="194" Count="0" />
      <LineId Id="225" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="227" Count="0" />
      <LineId Id="230" Count="2" />
      <LineId Id="107" Count="0" />
      <LineId Id="171" Count="1" />
      <LineId Id="239" Count="4" />
      <LineId Id="246" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="124" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_REAL">
      <LineId Id="118" Count="0" />
      <LineId Id="152" Count="5" />
      <LineId Id="69" Count="0" />
      <LineId Id="95" Count="1" />
      <LineId Id="164" Count="7" />
      <LineId Id="117" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_STRING">
      <LineId Id="112" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="118" Count="4" />
      <LineId Id="111" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_TIME">
      <LineId Id="194" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="171" Count="1" />
      <LineId Id="220" Count="7" />
      <LineId Id="208" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="124" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_UDINT">
      <LineId Id="134" Count="0" />
      <LineId Id="111" Count="2" />
      <LineId Id="140" Count="4" />
      <LineId Id="133" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_UINT">
      <LineId Id="115" Count="0" />
      <LineId Id="92" Count="2" />
      <LineId Id="121" Count="4" />
      <LineId Id="114" Count="0" />
      <LineId Id="131" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_ULINT">
      <LineId Id="134" Count="0" />
      <LineId Id="111" Count="2" />
      <LineId Id="140" Count="5" />
      <LineId Id="133" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_UXINT">
      <LineId Id="134" Count="0" />
      <LineId Id="111" Count="2" />
      <LineId Id="140" Count="4" />
      <LineId Id="133" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_WSTRING">
      <LineId Id="112" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="118" Count="4" />
      <LineId Id="111" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_XINT">
      <LineId Id="134" Count="0" />
      <LineId Id="111" Count="2" />
      <LineId Id="140" Count="4" />
      <LineId Id="133" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Equals_XWORD">
      <LineId Id="134" Count="0" />
      <LineId Id="111" Count="2" />
      <LineId Id="140" Count="4" />
      <LineId Id="133" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="40" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Error">
      <LineId Id="31" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="46" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Failure">
      <LineId Id="21" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="29" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="22" Count="1" />
    </LineIds>
    <LineIds Name="FB_Assert.M_IsTRUE">
      <LineId Id="82" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Passed">
      <LineId Id="31" Count="2" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Reset">
      <LineId Id="15" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="22" Count="3" />
      <LineId Id="21" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.M_Skip">
      <LineId Id="20" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>